#pragma once

#include "graphics.hpp"
#include <cstdint>

class Grayscale4GradsImage {
  public:
    Grayscale4GradsImage(int width, int height, uint8_t* bmp_data);
    const int Width() const { return width_; }
    const int Height() const { return height_; }
    void SetColorPalette(PixelColor palette[4]);
    const PixelColor& ColorAt(Vector2D<int> pos) const;

  private:
    int width_, height_;
    uint8_t* bmp_data_;
    PixelColor* color_palette_;
    const uint8_t ColorNumberAt(Vector2D<int> pos) const;
};

// 2bit = 1px => 1byte = 4px
// ceil(num_of_pixels / 4);
constexpr int Grayscale4GradsBMPDataSize(int width, int height) {
  return width * height + 3 / 4;
}

namespace {
  PixelColor grayscale_4grads_default_color_palette[4] = {
    {0, 0, 0},        // 0: black
    {102, 102, 102},  // 1: dark gray
    {187, 187, 187},  // 2: light gray
    {255, 255, 255},  // 3: white
  };

  const int aegis_width = 20;
  const int aegis_height = 34;
  uint8_t grayscale_aegis_bmp_data[Grayscale4GradsBMPDataSize(aegis_width, aegis_height)] = {
    0xff, 0xfc, 0x00, 0x3f, 0xff,
    0xff, 0xc1, 0x55, 0x43, 0xff,
    0xff, 0x16, 0xaa, 0x94, 0xff,
    0xfc, 0x6a, 0xaa, 0xa9, 0x3f,
    0xf1, 0xaa, 0xaa, 0xaa, 0x4f,
    0xf1, 0xaa, 0xaa, 0xaa, 0x4f,
    0xc6, 0xbe, 0xaa, 0xaa, 0x93,
    0xc6, 0x80, 0xeb, 0x02, 0x93,
    0x16, 0x30, 0xfb, 0x0c, 0x94,
    0x16, 0xfc, 0xff, 0xcf, 0x94,
    0x16, 0xf0, 0xff, 0x0f, 0x94,
    0xc6, 0xff, 0xcf, 0xff, 0x93,
    0xf2, 0x3f, 0xff, 0xfc, 0x8f,
    0xfc, 0x8f, 0xc3, 0xf2, 0x3f,
    0xff, 0x00, 0x3c, 0x00, 0xff,
    0xff, 0x30, 0x00, 0x03, 0xff,
    0xff, 0xc0, 0x00, 0x3c, 0xff,
    0xff, 0xfc, 0x00, 0x0f, 0x0f,
    0xff, 0xfc, 0x00, 0x33, 0xf3,
    0xff, 0xf0, 0x00, 0x0c, 0xf3,
    0xff, 0xc0, 0x00, 0x03, 0x0f,
    0xff, 0x00, 0x00, 0x00, 0xff,
    0xfc, 0x00, 0x00, 0x00, 0x3f,
    0xf3, 0x00, 0x00, 0x00, 0xcf,
    0xfc, 0xf0, 0x00, 0x0f, 0x3f,
    0xff, 0x0f, 0xff, 0xf0, 0xff,
    0xff, 0xf0, 0x00, 0x0f, 0xff,
    0xff, 0xf3, 0xc7, 0xcf, 0xff,
    0xff, 0xf1, 0x45, 0xcf, 0xff,
    0xff, 0xf1, 0x41, 0x4f, 0xff,
    0xff, 0xf1, 0x4c, 0x3f, 0xff,
    0xff, 0xc5, 0x4f, 0xff, 0xff,
    0xff, 0xcf, 0xcf, 0xff, 0xff,
    0xff, 0xf0, 0x3f, 0xff, 0xff,
  };
}

void DrawGrayscale4GradsImage(PixelWriter& writer, Vector2D<int> pos, const Grayscale4GradsImage& img);
void DrawGrayscale4GradsImageScaled(PixelWriter& writer, Vector2D<int> pos, int scale, const Grayscale4GradsImage& img);

const Grayscale4GradsImage MakeGrayscaleAegis();
