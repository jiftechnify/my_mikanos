#pragma once

#include "graphics.hpp"
#include <cstdint>

enum class Grayscale4GradsColor: uint8_t {
  Black,
  DarkGray,
  LightGray,
  White,
};

struct Grayscale4GradsImage {
  int width, height;
  const uint8_t* bmp_data;
};

// 2bit = 1px => 1byte = 4px
// ceil(num_of_pixels / 4);
constexpr int Grayscale4GradsBMPDataSize(int width, int height) {
  return width * height + 3 / 4;
}

namespace {
  const int aegis_width = 20;
  const int aegis_height = 34;
  const uint8_t grayscale_aegis_bmp_data[Grayscale4GradsBMPDataSize(aegis_width, aegis_height)] = {
    0xff, 0xfc, 0x00, 0x3f, 0xff,
    0xff, 0xc1, 0x55, 0x43, 0xff,
    0xff, 0x16, 0xaa, 0x94, 0xff,
    0xfc, 0x6a, 0xaa, 0xa9, 0x3f,
    0xf1, 0xaa, 0xaa, 0xaa, 0x4f,
    0xf1, 0xaa, 0xaa, 0xaa, 0x4f,
    0xc6, 0xbe, 0xaa, 0xaa, 0x93,
    0xc6, 0x80, 0xeb, 0x02, 0x93,
    0x16, 0x30, 0xfb, 0x0c, 0x94,
    0x16, 0xfc, 0xff, 0xcf, 0x94,
    0x16, 0xf0, 0xff, 0x0f, 0x94,
    0xc6, 0xff, 0xcf, 0xff, 0x93,
    0xf2, 0x3f, 0xff, 0xfc, 0x8f,
    0xfc, 0x8f, 0xc3, 0xf2, 0x3f,
    0xff, 0x00, 0x3c, 0x00, 0xff,
    0xff, 0x30, 0x00, 0x03, 0xff,
    0xff, 0xc0, 0x00, 0x3c, 0xff,
    0xff, 0xfc, 0x00, 0x0f, 0x0f,
    0xff, 0xfc, 0x00, 0x33, 0xf3,
    0xff, 0xf0, 0x00, 0x0c, 0xf3,
    0xff, 0xc0, 0x00, 0x03, 0x0f,
    0xff, 0x00, 0x00, 0x00, 0xff,
    0xfc, 0x00, 0x00, 0x00, 0x3f,
    0xf3, 0x00, 0x00, 0x00, 0xcf,
    0xfc, 0xf0, 0x00, 0x0f, 0x3f,
    0xff, 0x0f, 0xff, 0xf0, 0xff,
    0xff, 0xf0, 0x00, 0x0f, 0xff,
    0xff, 0xf3, 0xc7, 0xcf, 0xff,
    0xff, 0xf1, 0x45, 0xcf, 0xff,
    0xff, 0xf1, 0x41, 0x4f, 0xff,
    0xff, 0xf1, 0x4c, 0x3f, 0xff,
    0xff, 0xc5, 0x4f, 0xff, 0xff,
    0xff, 0xcf, 0xcf, 0xff, 0xff,
    0xff, 0xf0, 0x3f, 0xff, 0xff,
  };
}

const Grayscale4GradsImage GrayscaleAegis{aegis_width, aegis_height, grayscale_aegis_bmp_data};

void Grayscale4GradsImage(PixelWriter& writer, Vector2D<int> pos, const Grayscale4GradsImage& img);

